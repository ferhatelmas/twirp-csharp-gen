package main

import (
	"flag"
	"strings"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	outFileName = "generated.js"

	fileTemplate = `// Code generated by protoc-gen-twirpjs. DO NOT EDIT.

function createRequest(url, body) {
	return new Request(url, {
		method: "POST",
		credentials: "same-origin",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(body),
	});
}
{{range .Files}}{{range .Services}}{{range .Methods}}
{{.Comments.Leading}}export async function {{JSName .}}({{range $i, $v := .Input.Fields}}{{if $i}}, {{end}}{{$v.Desc.JSONName}}{{end}}) {
	const res = await fetch(createRequest("{{$.PathPrefix}}/{{.Desc.ParentFile.Package}}.{{.Parent.GoName}}/{{.GoName}}", { {{range $i, $v := .Input.Fields}}{{if $i}}, {{end}}"{{$v.Desc.JSONName}}": {{$v.Desc.JSONName}}{{end}} }));
	const jsonBody = await res.json();
	if (res.ok) {
		return jsonBody;
	}
	throw new Error(jsonBody.msg);
}
{{end}}{{end}}{{end}}`
)

func main() {
	// Set up our flags. The only one we care about for now is the server path prefix.
	var flags flag.FlagSet
	prefix := flags.String("pathPrefix", "/twirp", "the server path prefix to use, if modified from the Twirp default")

	// No special options for this generator
	opts := protogen.Options{ParamFunc: flags.Set}
	opts.Run(func(plugin *protogen.Plugin) error {
		out := plugin.NewGeneratedFile(outFileName, "")

		template, err := template.New("file").
			Funcs(template.FuncMap{"JSName": JSName}).
			Parse(fileTemplate)
		if err != nil {
			return err
		}

		in := jsData{
			Files:      plugin.Files,
			PathPrefix: *prefix,
		}

		return template.Execute(out, in)
	})
}

type jsData struct {
	Files      []*protogen.File
	PathPrefix string
}

// JSName exists as a way to get our camelCase method name.
func JSName(m *protogen.Method) string {
	if m.GoName == "" {
		return ""
	}
	return strings.ToLower(m.GoName[:1]) + m.GoName[1:]
}
