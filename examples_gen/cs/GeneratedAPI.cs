// <auto-generated>
//     Generated by protoc-gen-twirpcs.  DO NOT EDIT!
// </auto-generated>
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Google.Protobuf; // For ".ToByteArray()"

public class GeneratedAPI {
  public static readonly MediaTypeWithQualityHeaderValue CONTENT_TYPE_PROTOBUF = new MediaTypeWithQualityHeaderValue("application/protobuf");

  private delegate Resp doParsing<Resp>(byte[] data) where Resp : IMessage;
  private static async Task<Resp> DoRequest<Req, Resp>(HttpClient client, string address, Req req, doParsing<Resp> parserFunc) where Req : IMessage where Resp : IMessage {
    using (var content = new ByteArrayContent(req.ToByteArray())) {
      content.Headers.ContentType = CONTENT_TYPE_PROTOBUF;
      using (HttpResponseMessage response = await client.PostAsync(address, content)) {
        response.EnsureSuccessStatusCode();
        var byteArr = await response.Content.ReadAsByteArrayAsync();
        return parserFunc(byteArr);
      }
    }
  }

  // This is a multi-line comment using double slashes
  // and should render appropriately on output.
  public static async Task<Account.AccountDetailsResponse> GetAccountDetails(HttpClient client, Account.AccountDetailsRequest req) {
    return await DoRequest<Account.AccountDetailsRequest, Account.AccountDetailsResponse>(client, "/rpc/account.Account/GetAccountDetails", req, Account.AccountDetailsResponse.Parser.ParseFrom);
  }

  // This is a multi-line block comment, which is
  //also expected to render properly.
  public static async Task<Account.LogoutResponse> Logout(HttpClient client, Account.LogoutRequest req) {
    return await DoRequest<Account.LogoutRequest, Account.LogoutResponse>(client, "/rpc/account.Account/Logout", req, Account.LogoutResponse.Parser.ParseFrom);
  }

  public static async Task<Account.LogoutResponse> NoComment(HttpClient client, Account.LogoutRequest req) {
    return await DoRequest<Account.LogoutRequest, Account.LogoutResponse>(client, "/rpc/account.Account/NoComment", req, Account.LogoutResponse.Parser.ParseFrom);
  }

  // Creates a checkout session for the given item.
  public static async Task<Shop.CheckoutResponse> CreateCheckoutSession(HttpClient client, Shop.CheckoutRequest req) {
    return await DoRequest<Shop.CheckoutRequest, Shop.CheckoutResponse>(client, "/rpc/shop.Shop/CreateCheckoutSession", req, Shop.CheckoutResponse.Parser.ParseFrom);
  }
}
